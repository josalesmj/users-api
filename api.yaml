openapi: 3.0.3
info:
  title: API Test
  description: >
    This is API to register users
  version: 1.0.0
host: "localhost:3000"
schemes:
  - "http"
tags:
  - name: user
    description: Operations about user
paths:
  /users:
    get:
      tags:
        - user
      summary: Get a list of users
      description: Get a list with all registed users
      operationId: getListOfAllUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /users/{limit}/{page}:
    get:
      tags:
        - user
      summary: Get a list of users paginated by limit
      description: Get a list with paginated users
      operationId: getListOfUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              type: object
  /user/{userName}:
    get:
      tags:
        - user
      summary: Get an user by name
      description: Returns a single user
      operationId: getUserByName
      parameters:
        - name: userName
          in: path
          description: Name of the user to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update an user by name
      description: Returns a message with the result
      operationId: updateUserByName
      parameters:
        - name: userName
          in: path
          description: Name of the user to return
          required: true
          schema:
            type: string
      requestBody:
        description: New user information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              type: object
        '404':
          description: User not found
          content:
            application/json:
              type: object
    patch:
      tags:
        - user
      summary: Partial update an user by name
      description: Returns a message with the result
      operationId: partialUpdateUserByName
      parameters:
        - name: userName
          in: path
          description: Name of the user to return
          required: true
          schema:
            type: string
      requestBody:
        description: New user information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              type: object
        '404':
          description: User not found
          content:
            application/json:
              type: object
    delete:
      tags:
        - user
      summary: Deletes an user
      description: delete an user
      operationId: deleteUser
      parameters:
        - name: userName
          in: path
          description: 'Name of the user to delete'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              type: object
        '404':
          description: Invalid user's name
          content:
            application/json:
              type: object
components:
  schemas:
    User:
      type: object
      properties:
        nome:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        idade:
          type: integer
          example: '34'
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'